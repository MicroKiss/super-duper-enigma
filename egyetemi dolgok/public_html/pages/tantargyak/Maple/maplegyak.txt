Firstfirst := proc (n::integer, k::integer)::integer;

 local sum, i;

 sum := 0;

 for i to n do
 sum := sum+power(i, k)
 end do;

 return evalf(sum)
 end proc;


Firstsecond := proc (n::integer, k::integer)::integer;

 return  evalf(sum(power(x, k), x = 1 .. n))
 end proc;


Firstfirst(5, 2);

Firstsecond(6, 2);

#----------------------------------------#

Second := proc (n::integer)
 local A, B;

 A := Matrix(1 .. n, 1 .. n, 1)-Matrix(n, shape = identity);

 B := A^2;
 
 return B^2-13*B-12*A 
 end proc;

Second(6);

#----------------------------------------#
Third := proc (n::integer) 
local f, g, x, y, p1, p2;

f := proc (z) options operator, arrow;
 sin(z)/z^2 end proc;
 g := proc (z) options operator, arrow;
 sin(z^2) end proc;
 x := Vector(1 .. n, rand(1.0 .. 10.0));
 y := Vector(1 .. n, rand(-3.0 .. 3.0));
 p1 := plot([f(z), g(z)], z = 0 .. 11, color = ["Red", "Blue"], scaling = constrained);
 p2 := plot(x, y, style = point, symbol = circle, color = "Green");
 with(plots);
 display({p1, p2});
 end proc;


Third(10);

#----------------------------------------#
Fourth := {diff(x(t), t) = 2*x(t)+sin(y(t)), diff(y(t), t) = cos(x(t))-3*y(t), x(0) = 1, y(0) = 2};

mo := dsolve(Fourth, {x(t), y(t)}, type = numeric);


p1 := odeplot(mo, [x(t), y(t)], 0 .. 1, numpoints = 100, color = red);



#----------------------------------------#

with(LinearAlgebra)
Fifth := proc (A::Matrix, v::Vector) local Q, R, B, sol, tmp, i, final;
 final := RowDimension(A);
 with(LinearAlgebra);
 sol := [];
 for i to final do B := A^i;
 Q, R := QRDecomposition(B);
 tmp := Multiply(Multiply(MatrixNorm(R, Frobenius), Q), v);
 sol := [op(sol), tmp] end do;
 return sol end proc;

Fifth(Matrix(1 .. 3, 1 .. 3, [[1, 2, 3], [3, 5, 5], [4, 3, 2]]), Vector([1, 2, 3]));

